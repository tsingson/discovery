syntax = "proto3";

option go_package = "eureka";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "google/protobuf/timestamp.proto";
//import "google/protobuf/duration.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
// option (gogoproto.goproto_stringer_all) = false;
// option (gogoproto.stringer_all) =  true;
// option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;




message Zone {
    option (gogoproto.goproto_getters) = false;
    string Src = 1;
    map<string, uint32> Dst = 2;
}

message Node {
    option (gogoproto.goproto_getters) = false;
    string Addr = 1;
    uint32 Status = 2;
    string Zone = 3;
}

message respNodes {
    option (gogoproto.goproto_getters) = false;
    repeated Node Notes = 1;
}

message Instance {
    option (gogoproto.goproto_getters) = false;
    string Region = 1;
    string Zone = 2;
    string Env = 3;
    string AppID = 4;
    string Hostname = 5;

    repeated string Addrs = 6;
    uint32 Status = 7;
    string Version = 8;

    map<string, string> Metadata = 9;

    int64 RegTimestamp = 10;
    int64 UpTimestamp = 11;
    int64 RenewTimestamp = 12;

    int64 DirtyTimestamp = 13;
    int64 LatestTimestamp = 14;
}
message App {
    option (gogoproto.goproto_getters) = false;
    string AppID = 1;
    string Zone = 2;
    map<string, Instance> instances = 3;
    int64 latestTimestamp = 4;
}

message Apps {
    option (gogoproto.goproto_getters) = false;
    map<string, App> apps = 1;
    int64 latestTimestamp = 2;
}
message Instances {
    option (gogoproto.goproto_getters) = false;
    repeated Instance Instances = 1;
}

message InstanceInfo {
    option (gogoproto.goproto_getters) = false;
    map<string, Instances> Instance = 1;
    repeated Zone Scheduler = 2;
    int64 LatestTimestamp = 3;
}

message RespMsg {
    option (gogoproto.goproto_getters) = false;
    int32 Code = 1;
    string Msg = 2;
}


message RespFech {
    option (gogoproto.goproto_getters) = false;
    double code = 1;
    InstanceInfo Data = 2;
    uint64 LatestTimestamp = 3;
}
message RespFechs {
    option (gogoproto.goproto_getters) = false;
    double code = 1;
    map<string, InstanceInfo> Data = 2;
    uint64 LatestTimestamp = 3;
}
message RespNodes {
    option (gogoproto.goproto_getters) = false;
    double code = 1;
    map<string, Node> Data = 2;
    uint64 LatestTimestamp = 3;
}


message ArgRegister {
    option (gogoproto.goproto_getters) = false;
    string Region = 1;
    string Zone = 2;
    string Env = 3;
    string AppID = 4;
    string Hostname = 5;
    uint32 Status = 6;
    repeated string Addrs = 7;
    string Version = 8;
    string Metadata = 9;
    bool Replication = 10;
    int64 LatestTimestamp = 11;
    int64 DirtyTimestamp = 12;
}


message ArgRenew {
    option (gogoproto.goproto_getters) = false;
    string Zone = 1;
    string Env = 2;
    string AppID = 3;
    string Hostname = 4;
    bool Replication = 5;
    int64 DirtyTimestamp = 6;
}

message ArgCancel {
    option (gogoproto.goproto_getters) = false;
    string Zone = 1;
    string Env = 2;
    string AppID = 3;
    string Hostname = 4;
    bool Replication = 5;
    int64 LatestTimestamp = 6;
}

message ArgFetch {
    option (gogoproto.goproto_getters) = false;

    string Zone = 1;
    string Env = 2;
    string AppID = 3;
    uint32 Status = 4;
}


message ArgFetchAll {
    option (gogoproto.goproto_getters) = false;

    string Zone = 1;
    string Env = 2;
    repeated string AppID = 3;
    uint32 Status = 4;

}

message ArgRoll {
    option (gogoproto.goproto_getters) = false;

    string Zone = 1;
    string Env = 2;
    string AppID = 3;
    int64 LatestTimestamp = 4;
    //    string Hostname = 5;
}

message ArgRolls {
    option (gogoproto.goproto_getters) = false;
    string Zone = 1;
    string Env = 2;
    repeated string AppID = 3;
    repeated int64 LatestTimestamp = 4;
    //    string Hostname = 5;
}

message ArqSet {
    option (gogoproto.goproto_getters) = false;

    string Zone = 1;
    string Env = 2;
    string AppID = 3;
    repeated string Hostname = 4;
    repeated uint32 Status = 5;
    repeated string Metadata = 6;
    bool Replication = 7;
    int64 SetTimestamp = 8;
}


service EurekaDiscovery {

    rpc Register (ArgRegister) returns (RespMsg);
    rpc Renew (ArgRenew) returns (RespMsg);
    rpc Cancel (ArgCancel) returns (RespMsg);

    rpc Fetch (ArgFetch) returns (RespFech);
    rpc FetchAll (ArgFetchAll) returns (RespFechs);
    rpc Poll (ArgFetch) returns (stream RespFech);
    rpc Polls (ArgFetch) returns (stream RespFechs);
    rpc Nodes (ArgFetch) returns (RespMsg);
    rpc Set (ArqSet) returns (RespMsg);
}
